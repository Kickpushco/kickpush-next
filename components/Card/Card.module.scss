@use "sass:math";

@import "../../sass/global";

.Card {
  @include card-shadow();

  --card-padding: #{rem(24)};

  aspect-ratio: 440 / 496;
  color: $color-kickpush-white;
  border-radius: rem(10);
  display: block;
  margin: 0 auto;
  max-width: rem(320);
  padding: var(--card-padding);
  position: relative;
  width: 100%;

  &-light {
    color: $color-kickpush-white;
  }
  &-dark {
    color: $color-kickpush-black;
  }

  @include min-width($bp-mobile) {
    max-width: rem(360);
  }

  @include min-width($bp-unstack-cards) {
    max-width: none;

    &-large {
      --card-padding: var(--gutter);

      aspect-ratio: 940 / 496;
    }
  }

  @include min-width($bp-tablet) {
    &-small {
      --card-padding: #{rem(32)};
    }
  }
}

.Reveal {
  opacity: 0;
  transform: translateY(var(--gutter));

  &-inView {
    transform: none;
    opacity: 1;
    transition: opacity $duration-card-enter var(--card-delay, 0ms) ease-out,
      transform $duration-card-enter var(--card-delay, 0ms) $ease-out-back;
  }
}

.CardsWrapper {
  align-items: stretch;
  display: grid;
  gap: var(--gutter);
  margin: 0 rem(-8);
  width: calc(100% + #{rem(16)});

  @include min-width($bp-tiny) {
    margin: 0 rem(-16);
    width: calc(100% + #{rem(32)});
  }

  &-columns {
    @include min-width($bp-unstack-cards) {
      margin: 0;
      grid-template-columns: 1fr 1fr;
      width: 100%;

      > :nth-of-type(2n) {
        --card-delay: #{math.div($duration-card-enter, 2)};
      }
    }
  }
}
